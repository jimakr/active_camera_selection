// Generated by gencpp from file robosapiens_tool/Cameras_id_Confidence.msg
// DO NOT EDIT!


#ifndef ROBOSAPIENS_TOOL_MESSAGE_CAMERAS_ID_CONFIDENCE_H
#define ROBOSAPIENS_TOOL_MESSAGE_CAMERAS_ID_CONFIDENCE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robosapiens_tool
{
template <class ContainerAllocator>
struct Cameras_id_Confidence_
{
  typedef Cameras_id_Confidence_<ContainerAllocator> Type;

  Cameras_id_Confidence_()
    : camera1_conf(0.0)
    , camera2_conf(0.0)
    , camera3_conf(0.0)
    , camera4_conf(0.0)  {
    }
  Cameras_id_Confidence_(const ContainerAllocator& _alloc)
    : camera1_conf(0.0)
    , camera2_conf(0.0)
    , camera3_conf(0.0)
    , camera4_conf(0.0)  {
  (void)_alloc;
    }



   typedef float _camera1_conf_type;
  _camera1_conf_type camera1_conf;

   typedef float _camera2_conf_type;
  _camera2_conf_type camera2_conf;

   typedef float _camera3_conf_type;
  _camera3_conf_type camera3_conf;

   typedef float _camera4_conf_type;
  _camera4_conf_type camera4_conf;





  typedef boost::shared_ptr< ::robosapiens_tool::Cameras_id_Confidence_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robosapiens_tool::Cameras_id_Confidence_<ContainerAllocator> const> ConstPtr;

}; // struct Cameras_id_Confidence_

typedef ::robosapiens_tool::Cameras_id_Confidence_<std::allocator<void> > Cameras_id_Confidence;

typedef boost::shared_ptr< ::robosapiens_tool::Cameras_id_Confidence > Cameras_id_ConfidencePtr;
typedef boost::shared_ptr< ::robosapiens_tool::Cameras_id_Confidence const> Cameras_id_ConfidenceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robosapiens_tool::Cameras_id_Confidence_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robosapiens_tool::Cameras_id_Confidence_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robosapiens_tool::Cameras_id_Confidence_<ContainerAllocator1> & lhs, const ::robosapiens_tool::Cameras_id_Confidence_<ContainerAllocator2> & rhs)
{
  return lhs.camera1_conf == rhs.camera1_conf &&
    lhs.camera2_conf == rhs.camera2_conf &&
    lhs.camera3_conf == rhs.camera3_conf &&
    lhs.camera4_conf == rhs.camera4_conf;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robosapiens_tool::Cameras_id_Confidence_<ContainerAllocator1> & lhs, const ::robosapiens_tool::Cameras_id_Confidence_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robosapiens_tool

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robosapiens_tool::Cameras_id_Confidence_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robosapiens_tool::Cameras_id_Confidence_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robosapiens_tool::Cameras_id_Confidence_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robosapiens_tool::Cameras_id_Confidence_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robosapiens_tool::Cameras_id_Confidence_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robosapiens_tool::Cameras_id_Confidence_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robosapiens_tool::Cameras_id_Confidence_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c0d4772d7cc3a8c1b69088d5e653da29";
  }

  static const char* value(const ::robosapiens_tool::Cameras_id_Confidence_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc0d4772d7cc3a8c1ULL;
  static const uint64_t static_value2 = 0xb69088d5e653da29ULL;
};

template<class ContainerAllocator>
struct DataType< ::robosapiens_tool::Cameras_id_Confidence_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robosapiens_tool/Cameras_id_Confidence";
  }

  static const char* value(const ::robosapiens_tool::Cameras_id_Confidence_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robosapiens_tool::Cameras_id_Confidence_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 camera1_conf\n"
"\n"
"float32 camera2_conf\n"
"\n"
"float32 camera3_conf\n"
"\n"
"float32 camera4_conf\n"
;
  }

  static const char* value(const ::robosapiens_tool::Cameras_id_Confidence_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robosapiens_tool::Cameras_id_Confidence_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.camera1_conf);
      stream.next(m.camera2_conf);
      stream.next(m.camera3_conf);
      stream.next(m.camera4_conf);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Cameras_id_Confidence_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robosapiens_tool::Cameras_id_Confidence_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robosapiens_tool::Cameras_id_Confidence_<ContainerAllocator>& v)
  {
    s << indent << "camera1_conf: ";
    Printer<float>::stream(s, indent + "  ", v.camera1_conf);
    s << indent << "camera2_conf: ";
    Printer<float>::stream(s, indent + "  ", v.camera2_conf);
    s << indent << "camera3_conf: ";
    Printer<float>::stream(s, indent + "  ", v.camera3_conf);
    s << indent << "camera4_conf: ";
    Printer<float>::stream(s, indent + "  ", v.camera4_conf);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOSAPIENS_TOOL_MESSAGE_CAMERAS_ID_CONFIDENCE_H
