// Generated by gencpp from file robosapiens_tool/Box.msg
// DO NOT EDIT!


#ifndef ROBOSAPIENS_TOOL_MESSAGE_BOX_H
#define ROBOSAPIENS_TOOL_MESSAGE_BOX_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robosapiens_tool
{
template <class ContainerAllocator>
struct Box_
{
  typedef Box_<ContainerAllocator> Type;

  Box_()
    : top_left()
    , bottom_right()  {
    }
  Box_(const ContainerAllocator& _alloc)
    : top_left(_alloc)
    , bottom_right(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _top_left_type;
  _top_left_type top_left;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _bottom_right_type;
  _bottom_right_type bottom_right;





  typedef boost::shared_ptr< ::robosapiens_tool::Box_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robosapiens_tool::Box_<ContainerAllocator> const> ConstPtr;

}; // struct Box_

typedef ::robosapiens_tool::Box_<std::allocator<void> > Box;

typedef boost::shared_ptr< ::robosapiens_tool::Box > BoxPtr;
typedef boost::shared_ptr< ::robosapiens_tool::Box const> BoxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robosapiens_tool::Box_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robosapiens_tool::Box_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robosapiens_tool::Box_<ContainerAllocator1> & lhs, const ::robosapiens_tool::Box_<ContainerAllocator2> & rhs)
{
  return lhs.top_left == rhs.top_left &&
    lhs.bottom_right == rhs.bottom_right;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robosapiens_tool::Box_<ContainerAllocator1> & lhs, const ::robosapiens_tool::Box_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robosapiens_tool

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robosapiens_tool::Box_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robosapiens_tool::Box_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robosapiens_tool::Box_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robosapiens_tool::Box_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robosapiens_tool::Box_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robosapiens_tool::Box_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robosapiens_tool::Box_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2b9f4e3329747e348a5ae40cdd0c24ee";
  }

  static const char* value(const ::robosapiens_tool::Box_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2b9f4e3329747e34ULL;
  static const uint64_t static_value2 = 0x8a5ae40cdd0c24eeULL;
};

template<class ContainerAllocator>
struct DataType< ::robosapiens_tool::Box_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robosapiens_tool/Box";
  }

  static const char* value(const ::robosapiens_tool::Box_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robosapiens_tool::Box_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"\n"
"float32[] top_left # xmin,ymin\n"
"\n"
"float32[] bottom_right # xmax, ymax \n"
"\n"
"\n"
;
  }

  static const char* value(const ::robosapiens_tool::Box_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robosapiens_tool::Box_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.top_left);
      stream.next(m.bottom_right);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Box_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robosapiens_tool::Box_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robosapiens_tool::Box_<ContainerAllocator>& v)
  {
    s << indent << "top_left[]" << std::endl;
    for (size_t i = 0; i < v.top_left.size(); ++i)
    {
      s << indent << "  top_left[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.top_left[i]);
    }
    s << indent << "bottom_right[]" << std::endl;
    for (size_t i = 0; i < v.bottom_right.size(); ++i)
    {
      s << indent << "  bottom_right[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.bottom_right[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOSAPIENS_TOOL_MESSAGE_BOX_H
