// Generated by gencpp from file robosapiens_tool/PoseConfKpt2D.msg
// DO NOT EDIT!


#ifndef ROBOSAPIENS_TOOL_MESSAGE_POSECONFKPT2D_H
#define ROBOSAPIENS_TOOL_MESSAGE_POSECONFKPT2D_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <robosapiens_tool/Pose2DKeypoint.h>

namespace robosapiens_tool
{
template <class ContainerAllocator>
struct PoseConfKpt2D_
{
  typedef PoseConfKpt2D_<ContainerAllocator> Type;

  PoseConfKpt2D_()
    : header()
    , pose_id(0)
    , conf(0.0)
    , keypoint_list()  {
    }
  PoseConfKpt2D_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , pose_id(0)
    , conf(0.0)
    , keypoint_list(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _pose_id_type;
  _pose_id_type pose_id;

   typedef float _conf_type;
  _conf_type conf;

   typedef std::vector< ::robosapiens_tool::Pose2DKeypoint_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::robosapiens_tool::Pose2DKeypoint_<ContainerAllocator> >> _keypoint_list_type;
  _keypoint_list_type keypoint_list;





  typedef boost::shared_ptr< ::robosapiens_tool::PoseConfKpt2D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robosapiens_tool::PoseConfKpt2D_<ContainerAllocator> const> ConstPtr;

}; // struct PoseConfKpt2D_

typedef ::robosapiens_tool::PoseConfKpt2D_<std::allocator<void> > PoseConfKpt2D;

typedef boost::shared_ptr< ::robosapiens_tool::PoseConfKpt2D > PoseConfKpt2DPtr;
typedef boost::shared_ptr< ::robosapiens_tool::PoseConfKpt2D const> PoseConfKpt2DConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robosapiens_tool::PoseConfKpt2D_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robosapiens_tool::PoseConfKpt2D_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robosapiens_tool::PoseConfKpt2D_<ContainerAllocator1> & lhs, const ::robosapiens_tool::PoseConfKpt2D_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.pose_id == rhs.pose_id &&
    lhs.conf == rhs.conf &&
    lhs.keypoint_list == rhs.keypoint_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robosapiens_tool::PoseConfKpt2D_<ContainerAllocator1> & lhs, const ::robosapiens_tool::PoseConfKpt2D_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robosapiens_tool

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robosapiens_tool::PoseConfKpt2D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robosapiens_tool::PoseConfKpt2D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robosapiens_tool::PoseConfKpt2D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robosapiens_tool::PoseConfKpt2D_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robosapiens_tool::PoseConfKpt2D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robosapiens_tool::PoseConfKpt2D_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robosapiens_tool::PoseConfKpt2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "88f7162365f7e82118b9fd3fc8f9ae3b";
  }

  static const char* value(const ::robosapiens_tool::PoseConfKpt2D_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x88f7162365f7e821ULL;
  static const uint64_t static_value2 = 0x18b9fd3fc8f9ae3bULL;
};

template<class ContainerAllocator>
struct DataType< ::robosapiens_tool::PoseConfKpt2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robosapiens_tool/PoseConfKpt2D";
  }

  static const char* value(const ::robosapiens_tool::PoseConfKpt2D_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robosapiens_tool::PoseConfKpt2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message represents a full human pose 2D as a list of keypoints\n"
"\n"
"Header header\n"
"\n"
"# The id of the pose\n"
"int32 pose_id\n"
"\n"
"# The pose detection confidence of the model\n"
"float32 conf\n"
"\n"
"# A list of a human 2D pose keypoints\n"
"Pose2DKeypoint[] keypoint_list\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: robosapiens_tool/Pose2DKeypoint\n"
"# This message contains all relevant information for a human pose 2D keypoint\n"
"\n"
"# The kpt_name according to https://github.com/Daniil-Osokin/lightweight-human-pose-estimation.pytorch\n"
"\n"
"string kpt_name\n"
"\n"
"# x and y pixel position on the input image, (0, 0) is top-left corner of image\n"
"int32 x\n"
"int32 y\n"
;
  }

  static const char* value(const ::robosapiens_tool::PoseConfKpt2D_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robosapiens_tool::PoseConfKpt2D_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.pose_id);
      stream.next(m.conf);
      stream.next(m.keypoint_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PoseConfKpt2D_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robosapiens_tool::PoseConfKpt2D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robosapiens_tool::PoseConfKpt2D_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "pose_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pose_id);
    s << indent << "conf: ";
    Printer<float>::stream(s, indent + "  ", v.conf);
    s << indent << "keypoint_list[]" << std::endl;
    for (size_t i = 0; i < v.keypoint_list.size(); ++i)
    {
      s << indent << "  keypoint_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::robosapiens_tool::Pose2DKeypoint_<ContainerAllocator> >::stream(s, indent + "    ", v.keypoint_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOSAPIENS_TOOL_MESSAGE_POSECONFKPT2D_H
