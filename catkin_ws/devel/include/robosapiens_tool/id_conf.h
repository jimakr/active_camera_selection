// Generated by gencpp from file robosapiens_tool/id_conf.msg
// DO NOT EDIT!


#ifndef ROBOSAPIENS_TOOL_MESSAGE_ID_CONF_H
#define ROBOSAPIENS_TOOL_MESSAGE_ID_CONF_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robosapiens_tool
{
template <class ContainerAllocator>
struct id_conf_
{
  typedef id_conf_<ContainerAllocator> Type;

  id_conf_()
    : camera_id()
    , confidence(0.0)  {
    }
  id_conf_(const ContainerAllocator& _alloc)
    : camera_id(_alloc)
    , confidence(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _camera_id_type;
  _camera_id_type camera_id;

   typedef float _confidence_type;
  _confidence_type confidence;





  typedef boost::shared_ptr< ::robosapiens_tool::id_conf_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robosapiens_tool::id_conf_<ContainerAllocator> const> ConstPtr;

}; // struct id_conf_

typedef ::robosapiens_tool::id_conf_<std::allocator<void> > id_conf;

typedef boost::shared_ptr< ::robosapiens_tool::id_conf > id_confPtr;
typedef boost::shared_ptr< ::robosapiens_tool::id_conf const> id_confConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robosapiens_tool::id_conf_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robosapiens_tool::id_conf_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robosapiens_tool::id_conf_<ContainerAllocator1> & lhs, const ::robosapiens_tool::id_conf_<ContainerAllocator2> & rhs)
{
  return lhs.camera_id == rhs.camera_id &&
    lhs.confidence == rhs.confidence;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robosapiens_tool::id_conf_<ContainerAllocator1> & lhs, const ::robosapiens_tool::id_conf_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robosapiens_tool

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robosapiens_tool::id_conf_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robosapiens_tool::id_conf_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robosapiens_tool::id_conf_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robosapiens_tool::id_conf_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robosapiens_tool::id_conf_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robosapiens_tool::id_conf_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robosapiens_tool::id_conf_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dcf7cc8676447a505ed6b1be2b6b4548";
  }

  static const char* value(const ::robosapiens_tool::id_conf_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdcf7cc8676447a50ULL;
  static const uint64_t static_value2 = 0x5ed6b1be2b6b4548ULL;
};

template<class ContainerAllocator>
struct DataType< ::robosapiens_tool::id_conf_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robosapiens_tool/id_conf";
  }

  static const char* value(const ::robosapiens_tool::id_conf_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robosapiens_tool::id_conf_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string camera_id\n"
"\n"
"\n"
"float32 confidence\n"
;
  }

  static const char* value(const ::robosapiens_tool::id_conf_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robosapiens_tool::id_conf_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.camera_id);
      stream.next(m.confidence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct id_conf_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robosapiens_tool::id_conf_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robosapiens_tool::id_conf_<ContainerAllocator>& v)
  {
    s << indent << "camera_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.camera_id);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOSAPIENS_TOOL_MESSAGE_ID_CONF_H
