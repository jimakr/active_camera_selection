// Generated by gencpp from file robosapiens_tool/All_Camera_Detection_Info.msg
// DO NOT EDIT!


#ifndef ROBOSAPIENS_TOOL_MESSAGE_ALL_CAMERA_DETECTION_INFO_H
#define ROBOSAPIENS_TOOL_MESSAGE_ALL_CAMERA_DETECTION_INFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robosapiens_tool/Camera_Box_Detection_Confidence.h>

namespace robosapiens_tool
{
template <class ContainerAllocator>
struct All_Camera_Detection_Info_
{
  typedef All_Camera_Detection_Info_<ContainerAllocator> Type;

  All_Camera_Detection_Info_()
    : all_cam_data_list()  {
    }
  All_Camera_Detection_Info_(const ContainerAllocator& _alloc)
    : all_cam_data_list(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::robosapiens_tool::Camera_Box_Detection_Confidence_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::robosapiens_tool::Camera_Box_Detection_Confidence_<ContainerAllocator> >> _all_cam_data_list_type;
  _all_cam_data_list_type all_cam_data_list;





  typedef boost::shared_ptr< ::robosapiens_tool::All_Camera_Detection_Info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robosapiens_tool::All_Camera_Detection_Info_<ContainerAllocator> const> ConstPtr;

}; // struct All_Camera_Detection_Info_

typedef ::robosapiens_tool::All_Camera_Detection_Info_<std::allocator<void> > All_Camera_Detection_Info;

typedef boost::shared_ptr< ::robosapiens_tool::All_Camera_Detection_Info > All_Camera_Detection_InfoPtr;
typedef boost::shared_ptr< ::robosapiens_tool::All_Camera_Detection_Info const> All_Camera_Detection_InfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robosapiens_tool::All_Camera_Detection_Info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robosapiens_tool::All_Camera_Detection_Info_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robosapiens_tool::All_Camera_Detection_Info_<ContainerAllocator1> & lhs, const ::robosapiens_tool::All_Camera_Detection_Info_<ContainerAllocator2> & rhs)
{
  return lhs.all_cam_data_list == rhs.all_cam_data_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robosapiens_tool::All_Camera_Detection_Info_<ContainerAllocator1> & lhs, const ::robosapiens_tool::All_Camera_Detection_Info_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robosapiens_tool

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robosapiens_tool::All_Camera_Detection_Info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robosapiens_tool::All_Camera_Detection_Info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robosapiens_tool::All_Camera_Detection_Info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robosapiens_tool::All_Camera_Detection_Info_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robosapiens_tool::All_Camera_Detection_Info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robosapiens_tool::All_Camera_Detection_Info_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robosapiens_tool::All_Camera_Detection_Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b20c90fe57f1708af683b629d64b5766";
  }

  static const char* value(const ::robosapiens_tool::All_Camera_Detection_Info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb20c90fe57f1708aULL;
  static const uint64_t static_value2 = 0xf683b629d64b5766ULL;
};

template<class ContainerAllocator>
struct DataType< ::robosapiens_tool::All_Camera_Detection_Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robosapiens_tool/All_Camera_Detection_Info";
  }

  static const char* value(const ::robosapiens_tool::All_Camera_Detection_Info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robosapiens_tool::All_Camera_Detection_Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Camera_Box_Detection_Confidence[] all_cam_data_list\n"
"\n"
"================================================================================\n"
"MSG: robosapiens_tool/Camera_Box_Detection_Confidence\n"
"string camera_id\n"
"\n"
"int32 detection\n"
"\n"
"float32 confidence\n"
;
  }

  static const char* value(const ::robosapiens_tool::All_Camera_Detection_Info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robosapiens_tool::All_Camera_Detection_Info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.all_cam_data_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct All_Camera_Detection_Info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robosapiens_tool::All_Camera_Detection_Info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robosapiens_tool::All_Camera_Detection_Info_<ContainerAllocator>& v)
  {
    s << indent << "all_cam_data_list[]" << std::endl;
    for (size_t i = 0; i < v.all_cam_data_list.size(); ++i)
    {
      s << indent << "  all_cam_data_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::robosapiens_tool::Camera_Box_Detection_Confidence_<ContainerAllocator> >::stream(s, indent + "    ", v.all_cam_data_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOSAPIENS_TOOL_MESSAGE_ALL_CAMERA_DETECTION_INFO_H
