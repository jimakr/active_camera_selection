# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robosapiens_tool/All_Camera_Detection_Info.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import robosapiens_tool.msg

class All_Camera_Detection_Info(genpy.Message):
  _md5sum = "b20c90fe57f1708af683b629d64b5766"
  _type = "robosapiens_tool/All_Camera_Detection_Info"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """Camera_Box_Detection_Confidence[] all_cam_data_list

================================================================================
MSG: robosapiens_tool/Camera_Box_Detection_Confidence
string camera_id

int32 detection

float32 confidence
"""
  __slots__ = ['all_cam_data_list']
  _slot_types = ['robosapiens_tool/Camera_Box_Detection_Confidence[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       all_cam_data_list

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(All_Camera_Detection_Info, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.all_cam_data_list is None:
        self.all_cam_data_list = []
    else:
      self.all_cam_data_list = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.all_cam_data_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.all_cam_data_list:
        _x = val1.camera_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_if().pack(_x.detection, _x.confidence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.all_cam_data_list is None:
        self.all_cam_data_list = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.all_cam_data_list = []
      for i in range(0, length):
        val1 = robosapiens_tool.msg.Camera_Box_Detection_Confidence()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.camera_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.camera_id = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.detection, _x.confidence,) = _get_struct_if().unpack(str[start:end])
        self.all_cam_data_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.all_cam_data_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.all_cam_data_list:
        _x = val1.camera_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_if().pack(_x.detection, _x.confidence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.all_cam_data_list is None:
        self.all_cam_data_list = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.all_cam_data_list = []
      for i in range(0, length):
        val1 = robosapiens_tool.msg.Camera_Box_Detection_Confidence()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.camera_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.camera_id = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.detection, _x.confidence,) = _get_struct_if().unpack(str[start:end])
        self.all_cam_data_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_if = None
def _get_struct_if():
    global _struct_if
    if _struct_if is None:
        _struct_if = struct.Struct("<if")
    return _struct_if
